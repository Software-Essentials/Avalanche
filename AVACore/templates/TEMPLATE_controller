import { AFController } from "avacore";
<#import?>


/**<#author?><#description?>
 */
class <#name?> extends AFController {

  /**
   * @param {Object} request
   * @param {Object} response
   */
  index(request, response) {
    const onSuccess = ({ results }) => {
      response.json({
        success: true,
        data: results
      });
    }
    const onFailure = ({ errors }) => {
      response.json({
        success: false,
        message: "Unable to display <#model_lowercase?>s.",
        errors
      });
    }
    <#model?>.select({
      properties: ["ID", "name", "createdAt", "updatedAt"],
      conditions: [],
      onSuccess,
      onFailure
    });
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  show(request, response) {
    const onSuccess = ({ results }) => {
      const isEmpty = results.length <= 0;
      response.json({
        success: !isEmpty,
        message: isEmpty ? "<#model?> doesn't exist." : "Displaying <#model_lowercase?>.",
        data: isEmpty ? undefined : results[0]
      });
    }
    const onFailure = ({ errors }) => {
      response.json({
        success: false,
        message: "<#model?> doesn't exist."
      });
    }
    request.query.validate("ID").type("number");
    if (request.validate({ onFailure })) {
      const { ID } = request.query;
      <#model?>.select({
        properties: ["ID", "name", "createdAt", "updatedAt"],
        conditions: [{ key: "ID", value: ID }],
        onSuccess,
        onFailure
      });
    }
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  store(request, response) {
    const onSuccess = ({ results }) => {
      response.json({
        success: true,
        message: "<#model?> created.",
        data: results[0]
      });
    }
    const onFailure = ({ errors }) => {
      response.json({
        success: false,
        message: "Unable to create <#model_lowercase?>.",
        errors
      });
    }
    request.body.validate("name").range(4, 64);
    request.body.validate("name").type("string");
    if (request.validate({ onFailure })) {
      const { name } = request.body;
      const <#model_lowercase?> = new <#model?>();
      <#model_lowercase?>.name = name;
      <#model_lowercase?>.save({
        onFailure, onSuccess: () => {
          onSuccess({ results: [{ ID: <#model_lowercase?>.ID }] });
        }
      });
    };
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  update(request, response) {
    const onSuccess = () => {
      response.json({
        success: true,
        message: "<#model?> saved."
      });
    }
    const onFailure = ({ errors }) => {
      response.json({
        success: false,
        message: "Unable to save <#model_lowercase?>.",
        errors
      });
    }
    request.body.validate("ID").length(36);
    request.body.validate("ID").type("string");
    request.body.validate("name").range(4, 64);
    request.body.validate("name").type("string");
    if (request.validate({ onFailure })) {
      const { ID, name } = request.body;
      <#model?>.get(ID, {
        onFailure: ({ errors }) => {
          onFailure({ errors });
        },
        onSuccess: (<#model_lowercase?>) => {
          <#model_lowercase?>.name = name;
          <#model_lowercase?>.save({ onFailure, onSuccess });
        }
      });
    }
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  destroy(request, response) {
    const onSuccess = () => {
      response.json({
        success: true,
        message: "<#model?> deleted."
      });
    }
    const onFailure = ({ errors }) => {
      response.json({
        success: false,
        message: "Unable to delete <#model_lowercase?>.",
        errors
      });
    }
    request.body.validate("ID").length(36);
    request.body.validate("ID").type("string");
    if (request.validate({ onFailure })) {
      const { ID } = request.body;
      <#model?>.delete({
        conditions: [{ key: "ID", value: ID }],
        onFailure,
        onSuccess: ({ results }) => {
          if (results.affectedRows === 1) {
            onSuccess();
          } else {
            onFailure({ errors: [{ error: "notExist", message: "<#model?> does not exist." }] });
          }
        }
      });
    }
  }

}


export default <#name?>;