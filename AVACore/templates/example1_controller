//
//  PostController.js
//  Avalanche boilerplate
//
//  Created by Lawrence Bensaid on 12/4/2020.
//  Copyright Â© 2020 Lawrence Bensaid. All rights reserved.
//

import { AFController } from "avacore";
import Post from "../models/Post.js";


/**
 * @author Lawrence Bensaid <lawrencebensaid@icloud.com>
 * 
 * @description Manages requests regarding Posts.
 * This Controller was added as a part of the 'WebApp' boilerplate at initialisation of this Avalanche project.
 */
class PostController extends AFController {

  /**
   * @description Shows a specific post.
   */
  async show({ body, request }, resolve, reject) {
    body.validate("ID").alias("ID").number();
    if (!request.validate({ reject })) return;
    try {
      const { ID } = body;
      const results = await Post.select({
        properties: ["ID", "name", "body", "createdAt", "modifiedAt"],
        conditions: ID ? [{ key: "ID", value: ID }] : []
      });
      resolve({
        data: ID && results.length === 1 ? results[0] : results
      });
    } catch (error) {
      console.log(error);
      reject({
        message: "Unable to show post",
        errors: [{ error: error.code, message: error.message }]
      });
    }
  }


  /**
   * @description Creates a new post.
   */
  async store({ body, request }, resolve, reject) {
    body.validate("postName").alias("Name").string().notEmpty();
    body.validate("postBody").alias("Body").string().notEmpty();
    if (!request.validate({ reject })) return;
    try {
      const { postName, postBody } = body;
      const post = new Post();
      post.name = postName;
      post.body = postBody
      await post.save();
      resolve({
        redirect: "/posts",
        message: "post created.",
        data: post.data()
      });
    } catch (error) {
      console.log(error);
      reject({
        redirect: "/posts",
        message: "Unable to create post",
        errors: [{ error: error.code, message: error.message }]
      });
    }
  }


  /**
   * @description Updates all existing posts with a specific ID.
   */
  async update({ body, request }, resolve, reject) {
    body.validate("ID").alias("ID").number().notEmpty();
    body.validate("postName").alias("Name").string().notEmpty();
    body.validate("postBody").alias("Body").string().notEmpty();
    if (!request.validate({ reject })) return;
    try {
      const { ID, postName, postBody } = body;
      const post = await Post.get(ID);
      post.name = postName;
      post.body = postBody;
      post.modifiedAt = new Date().valueOf();
      await post.save();
      resolve({
        message: "Post updated."
      });
    } catch (error) {
      console.log(error);
      reject({
        message: "Unable to update post",
        errors: [{ error: error.code, message: error.message }]
      });
    }
  }


  /**
   * @description Deletes all posts with a specific ID.
   */
  async destroy({ body, request }, resolve, reject) {
    body.validate("ID").alias("ID").number().notEmpty();
    if (!request.validate({ reject })) return;
    try {
      const { ID } = body;
      const post = await Post.get(ID);
      await post.delete();
      resolve({
        message: "Post deleted."
      });
    } catch (error) {
      console.log(error);
      reject({
        message: "Unable to delete post",
        errors: [{ error: error.code, message: error.message }]
      });
    }
  }

}


export default PostController;