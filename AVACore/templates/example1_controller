import { AFController } from "avacore";
import Post from "../models/Post.js";


/**
 * This Controller was added as a part of the 'WebApp' boilerplate at initialisation of this Avalanche project.
 * @description Manages requests regarding Posts.
 */
class PostController extends AFController {

  /**
   * @description Shows a specific post.
   * 
   * @param {Object} request
   * @param {Object} response
   */
  async show(request, response) {
    const onSuccess = ({ message, results }) => {
      response.json({
        success: true,
        data: results
      });
    }
    const onFailure = ({ message, errors }) => {
      response.json({
        success: false,
        message: message || "Post doesn't exist.",
        errors
      });
    }
    request.body.validate("ID").alias("ID").number();
    if (request.validate({ onFailure })) {
      try {
        const { ID } = request.body;
        const results = await Post.select({
          properties: ["ID", "name", "body", "createdAt", "modifiedAt"],
          conditions: ID ? [{ key: "ID", value: ID }] : []
        });
        onSuccess({ results: ID && results.length === 1 ? results[0] : results });
      } catch (error) {
        console.log(error);
        onFailure({ errors: [{ error: error.code, message: error.message }] });
      }
    }
  }


  /**
   * @description Creates a new post.
   * 
   * @param {Object} request
   * @param {Object} response
   */
  async store(request, response) {
    const onSuccess = ({ message }) => {
      if (typeof request.headers.referer === "string") {
        response.redirect("/posts");
        return;
      }
      response.json({
        success: true,
        message: message || "post created."
      });
    }
    const onFailure = ({ message, errors }) => {
      if (typeof request.headers.referer === "string") {
        response.redirect("/posts");
        return;
      }
      response.json({
        success: false,
        message: message || "Unable to add post.",
        errors
      });
    }
    request.body.validate("postName").alias("Name").string().notEmpty();
    request.body.validate("postBody").alias("Body").string().notEmpty();
    if (request.validate({ onFailure })) {
      try {
        const { postName, postBody } = request.body;
        const post = new Post();
        post.name = postName;
        post.body = postBody
        await post.save();
        onSuccess({});
      } catch (error) {
        console.log(error);
        onFailure({ errors: [{ error: error.code, message: error.message }] });
      }
    }
  }


  /**
   * @description Updates all existing posts with a specific ID.
   * 
   * @param {Object} request
   * @param {Object} response
   */
  async update(request, response) {
    const onSuccess = ({ message }) => {
      response.json({
        success: true,
        message: message || "post updated."
      });
    }
    const onFailure = ({ message, errors }) => {
      response.json({
        success: false,
        message: message || "Unable to update post.",
        errors
      });
    }
    request.body.validate("ID").alias("ID").number().notEmpty();
    request.body.validate("postName").alias("Name").string().notEmpty();
    request.body.validate("postBody").alias("Body").string().notEmpty();
    if (request.validate({ onFailure })) {
      try {
        const { ID, postName, postBody } = request.body;
        const post = await Post.get(ID);
        post.name = postName;
        post.body = postBody;
        post.modifiedAt = new Date().valueOf();
        await post.save();
        onSuccess({});
      } catch (error) {
        console.log(error);
        onFailure({ errors: [{ error: error.code, message: error.message }] });
      }
    }
  }


  /**
   * @description Deletes all posts with a specific ID.
   * 
   * @param {Object} request
   * @param {Object} response
   */
  async destroy(request, response) {
    const onSuccess = ({ message }) => {
      response.json({
        success: true,
        message: message || "Post deleted."
      });
    }
    const onFailure = ({ message, errors }) => {
      response.json({
        success: false,
        message: message || "Unable to delete post.",
        errors
      });
    }
    request.body.validate("ID").alias("ID").number().notEmpty();
    if (request.validate({ onFailure })) {
      try {
        const { ID } = request.body;
        const post = await Post.get(ID);
        await post.delete();
        onSuccess({});
      } catch (error) {
        console.log(error);
        onFailure({ errors: [{ error: error.code, message: error.message }] });
      }
    }
  }

}


export default PostController;