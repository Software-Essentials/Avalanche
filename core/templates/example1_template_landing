<div class="container jumbotron">
  <img class="mx-auto d-block" src="assets/img/darthvader.svg" alt="" />
  <h1 class="text-center text-muted">Your Avalanche app is fully operational,<br />my lord.</h1>
</div>
<div class="container-fluid jumbotron">
  <div class="container">
    <h2 class="text-center">Getting started</h2>
    <p></p>
    <h3>What this boilerplate includes</h3>
    <p>This boilerplate is a basic posts app. It has an REST API, and a webfront. You can view posts, create posts, edit posts, and delete posts. Please use this boilerplate as an example to help you understand how to build an Avalanche application.</p>
    <h3>Suggested next steps</h3>
    <ul>
      <li>Configure your app</li>
      <li>Install any Avalanche packages you might need</li>
      <li>Build out your models</li>
      <li>Setup your controllers / routes</li>
      <li>Design your views</li>
    </ul>
    <hr />
    <h2 class="text-center">Configuration</h2>
    <h3>Database</h3>
    <p>By default this boilerplate is connected to the filestorage instead of a database. We did this so you could jump right into the functionality this app has without any configuration needed. However, this is not ideal at all. Generally you are going to want to connect your Avalanche app to a database. Below we will walk you through connecting this app to your database.</p>
    <h4>Database configuration</h4>
    <p>First of all find the configuration file in  <i>app/environments/</i> there you will find a configuration file called <i>development.environment.json</i> that came with this boilerplate. In there is a section <code>database</code>. Remove the dummy credentials and replace them with your MySQL Database credentials. Typically you would be running a Database on your local machine on <code>localhost</code>. If this is not the case you can replace localhost with your Database server's IP address.</p>
    <h4>Modify your Models and Seeds to work with your database</h4>
    <p>Great! Now that Avalanche and your Database can talk to eachother we can proceed. Any existing models or seeds are still going to be using your Filestorage until configured otherwise. Let's start with our models. The models can be found in <i>app/models/</i>. In this case there is only one model named <code>Post</code>. As you can see there is a variable <code>this.METHOD</code> and it is set to <code>STORAGE</code>. We need to change this to <code>DATABASE</code>. Great! Now the last thing left to do is change the seeds. The seeds files can be found in <i>app/migration/seeds/</i>. Again, there is only one file we need to modify. Every seeds set has either a zone or a table assigned to it. This tells the Seeder where to store the seeds. In this case it is set to <code>zone</code>. change that to <code>table</code>. (In the future, make sure the value of <code>table</code> or <code>zone</code> in your seeds file is the same as the value of <code>this.NAME</code> in your corresponding model.)</p>
    <h4>Migrations</h4>
    <p>Updating your tables every time you make a change can be tedious. That's why Avalanche has a Migrator. The migrator builds up your database structure whenever it is called to do so. You can use the command <kbd>$ avalanche migrate</kbd> to migrate all your models to your database tables and record zones (file storage).</p>
    <h3>Session rememberence</h3>
    <i>Read this if you installed the Auth Avalanche package.</i>
    <p>Session rememberence allows sessions to be retained even after the server has restarted. This is achieved by connecting the session store to your database. Session rememberence is essential when dealing with authentication. Users don't want to Sign in again and again, every time your server reboots.</p>
    <h4>Configure session rememberence</h4>
    <p>Once again open the <i>development.environment.json</i> configuration file located in <i>app/environments/</i>. Under the section <code>auth</code> there is a setting called <code>sessionStore</code>. Change that from "null" to "MYSQL". Done!</p>
    <hr />
    <h2 class="text-center">Expanding your application</h2>
    <p>You don't have to write an intire controller class every time you want to add a resource, or copy the code of an exsisting one and modify it to your needs. Instead you can use the command <kbd>$ avalanche make</kbd> to add components to your app.</p>
    <hr />
    <h2 class="text-center">Avalanche packages</h2>
    <p>Building an Sign Up/Sign In authentication system can take long. That's why we've already done the hard work for you. The Auth package is one of the packages that you can install and modify to your liking. Use the command <kbd>$ avalanche install Auth</kbd> to install the Auth package.</p>
    <hr />
    <h2 class="text-center">More info on the Wiki</h2>
    <p>The above was only a brief tutorial to help you get started. But please make use of the documentation on the <a href="https://github.com/noriasoft/Avalanche/wiki">GitHub Wiki</a>.</p>
  </div>
</div>