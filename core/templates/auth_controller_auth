import { AVAController } from "avacore";
import User from "../models/User";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";


/**
 * @description Manages requests.
 */
class AuthController extends AVAController {

  /**
   * @param {Object} request
   * @param {Object} response
   */
  logout(request, response) {
    request.session.token = undefined;
    if (typeof request.headers.referer === "string") {
      response.redirect("/signin");
    } else {
      response.json({
        success: true,
        message: "Signed out."
      });
    }
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  login(request, response) {
    const onSuccess = ({result}) => {
      if (typeof request.headers.referer === "string") {
        response.redirect("/profile");
      } else {
        response.json({
          success: true,
          message: "Signed in.",
          data: result
        });
      }
    }
    const onFailure = ({errors}) => {
      if (typeof request.headers.referer === "string") {
        response.redirect("/signin");
      } else {
        response.json({
          success: false,
          errors: errors
        });
      }
    }
    request.body.validate("userEmail").type("string");
    request.body.validate("userEmail").greaterThan(4);
    request.body.validate("userPassword").type("string");
    request.body.validate("userPassword").greaterThan(4);
    const { userEmail, userPassword } = request.body;
    new User().where("email", userEmail).fetch({
      onFailure,
      onSuccess: ({results}) => {
        if (results.length === 1) {
          const result = results[0];
          const data = { userID: result.ID };
          bcrypt.compare(userPassword, result.password).then((passwordIsCorrect) => {
            if (!passwordIsCorrect) {
              onFailure({errors: [{ error: "invalidPassword", message: "Password incorrect." }]});
            } else {
              jwt.sign(data, environment.secret, { expiresIn: "30d" }, (error, token) => {
                if (error) {
                  onFailure({ errors: [{error: "signError", message: "Failed to generate token." }]});
                } else {
                  request.session.token = token;
                  onSuccess({result: { tokenÂ }});
                }
              });
            }
          }).catch((error) => {
            onFailure({errors: [{ error: "decryptionFailure", message: "Unable to decrypt password." }]});
          });
        } else {
          onFailure({errors: [{ error: "emailNotFound", message: "Email not found." }]});
        }
      }
    });
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  register(request, response) {
    const { userEmail, userPassword } = request.body;
    const onSuccess = () => {
      if(typeof request.headers.referer === "string") {
        response.redirect("/profile");
      } else {
        response.json({
          success: true,
          message: "Account created."
        });
      }
    };
    const onFailure = ({errors}) => {
      if(typeof request.headers.referer === "string") {
        response.redirect("/signup");
      } else {
        response.json({
          success: false,
          errors: errors
        });
      }
    };
    bcrypt.hash(userPassword, global.environment.saltRounds, (error, hashedPassword) => {
      if(error) {
        onFailure({errors: [{ error: "encryptionFailure", message: "Failed to encrypt password" }]});
        return;
      }
      new User().insert({email: userEmail, password: hashedPassword}).then({onSuccess}).catch({onFailure});
    });
  }
  
}


export default AuthController;