// Imports
const { AVAController } = require("avacore");
const User = require("../models/User");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");


/**
 * @description Manages requests.
 */
class AuthController extends AVAController {

  constructor() {
    super()
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  logout(request, response) {
    request.session.token = undefined;
    if (typeof request.headers.referer === "string") {
      response.redirect("/signin");
    } else {
      response.json({
        success: true,
        message: "Signed out."
      });
    }
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  login(request, response) {
    const userEmail = request.body.userEmail;
    const givenPassword = request.body.userPassword;
    const rememberMe = request.body.rememberMe === "on";
    const onSuccess = ({token}) => {
      if (typeof request.headers.referer === "string") {
        response.redirect("/profile");
      } else {
        response.json({
          success: true,
          message: "Signed in.",
          data: { tokenÂ }
        });
      }
    }
    const onFailure = ({error}) => {
      if (typeof request.headers.referer === "string") {
        response.redirect("/signin");
      } else {
        response.json({
          success: true,
          message: error.message
        });
      }
    }
    new User().where("user_email", userEmail).fetch(({error, self}) => {
      if (error) {
        onFailure({error});
      } else {
        bcrypt.compare(givenPassword, self.password).then((passwordIsCorrect) => {
          if (!passwordIsCorrect) {
            onFailure({error: new Error("Password incorrect.")});
          } else {
            const data = {
              userID: self.ID
            };
            jwt.sign(data, environment.secret, { expiresIn: "30d" }, (error, token) => {
              if (error) {
                onFailure({error});
              } else {
                request.session.token = token;
                onSuccess({token});
              }
            });
          }
        });
      }
    });
  }


  /**
   * @param {Object} request
   * @param {Object} response
   */
  register(request, response) {
    const userPassword = request.body.userPassword;
    const userPassword2 = request.body.userPassword2;
    const userEmail = request.body.userEmail;
    const onSuccess = () => {
      if(typeof request.headers.referer === "string") {
        response.redirect("/profile");
      } else {
        response.json({
          success: true,
          message: "Account created."
        });
      }
    };
    const onFailure = ({error}) => {
      if(typeof request.headers.referer === "string") {
        response.redirect("/signup");
      } else {
        response.json({
          success: false,
          message: error.message
        });
      }
    };
    if (userPassword !== userPassword2) {
      onFailure();
      return;
    }
    bcrypt.hash(userPassword, global.environment.saltRounds, (error, hashedPassword) => {
      if(error) {
        onFailure({error});
        return;
      }
      const user = new User();
      user.email = userEmail;
      user.password = hashedPassword;
      user.save({onSuccess, onFailure});
    });
  }
  
}


module.exports = AuthController;