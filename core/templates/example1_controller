// Imports
const { AVAController } = require("avacore");
const Post = require("../models/Post.js");


/**
 * This Controller was added as a part of 'example1' at initialisation of this Avalanche project.
 * @description Manages requests regarding Posts.
 */
class PostController extends AVAController {

  constructor() {
    super()
  }


  /**
   * @description Shows all posts.
   * @param {Object} request
   * @param {Object} response
   */
  index(request, response) {
    const posts = new Post().all();
    const hasContents = posts.length > 0;
    var data = [];
    for (const post of posts) {
      data.push(post.get());
    }
    response.json({
      success: hasContents,
      message: hasContents ? "Showing all records." : "No records to display",
      data: data
    });
  }


  /**
   * @description Shows a specific post.
   * @param {Object} request
   * @param {Object} response
   */
  show(request, response) {
    const index = request.params.ID;
    const posts = new Post().where("post_id", parseInt(index), "Post");
    const hasContents = posts.length > 0;
    const data = hasContents ? posts[0].get() : undefined;
    response.json({
      success: hasContents,
      message: hasContents ? "Showing record." : "Record doesn't exist.",
      data: data
    });
  }


  /**
   * @description Creates a new post.
   * @param {Object} request
   * @param {Object} response
   */
  store(request, response) {
    const post = new Post();
    post.name = request.body.postName;
    post.body = request.body.postBody
    const success = post.save();
    if(typeof request.headers.referer === "string") {
      response.redirect("/posts");
    } else {
      response.json({
        success: success,
        message: success ? "Record added." : "Unable to add record."
      });
    }
  }


  /**
   * @description Updates all existing posts with a specific ID.
   * @param {Object} request
   * @param {Object} response
   */
  update(request, response) {
    const index = request.body.ID;
    const posts = new Post().where("post_id", parseInt(index), "Post");
    const hasContents = posts.length > 0;
    const multiple = posts.length > 1
    if(hasContents) {
      if(multiple) {
        for(const i in posts) {
          posts[i].name = request.body.postName;
          posts[i].body = request.body.postBody;
          posts[i].updatedAt = new Date().valueOf();
          posts[i].save()
        }
      } else {
        const i = Object.keys(posts)[0];
        posts[i].name = request.body.postName;
        posts[i].body = request.body.postBody;
        posts[i].updatedAt = new Date().valueOf();
        posts[i].save()
      }
    }
    response.json({
      success: hasContents,
      message: hasContents ? "Record updated." : "Unable to update record."
    });
  }


  /**
   * @description Deletes all posts with a specific ID.
   * @param {Object} request
   * @param {Object} response
   */
  destroy(request, response) {
    const index = request.body.ID;
    const posts = new Post().where("post_id", parseInt(index), "Post");
    const hasContents = posts.length > 0;
    const multiple = posts.length > 1
    var success = false;
    if(hasContents) {
      if(multiple) {
        for(const i in posts) {
          success = posts[i].delete()
        }
      } else {
        const i = Object.keys(posts)[0];
        success = posts[i].delete()
      }
    }
    response.json({
      success: success,
      message: success ? "Record deleted." : "Unable to delete record."
    });
  }

}



module.exports = PostController;