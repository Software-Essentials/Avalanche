// Imports
const { AVAController } = require("avacore");
const Post = require("../models/Post.js");


/**
 * This Controller was added as a part of 'example1' at initialisation of this Avalanche project.
 * @description Manages requests regarding Posts.
 */
class PostController extends AVAController {

  constructor() {
    super()
  }


  /**
   * @description Shows all posts.
   * @param {Object} request
   * @param {Object} response
   */
  index(request, response) {
    const onSuccess = ({results}) => {
      const isEmpty = results.length <= 0;
      var data = [];
      for(const i in results) {
        data.push(results[i].get());
      }
      response.json({
        success: isEmpty,
        message: isEmpty ? "No posts to display." : "Showing posts.",
        data: isEmpty ? undefined : data
      });
    }
    const onFailure = () => {
      response.json({
        success: false,
        message: "Failure."
      });
    }
    Post.all({onSuccess, onFailure});
  }


  /**
   * @description Shows a specific post.
   * @param {Object} request
   * @param {Object} response
   */
  show(request, response) {
    const index = parseInt(request.params.ID);
    const onSuccess = ({results}) => {
      const isEmpty = results.length <= 0;
      response.json({
        success: isEmpty,
        message: isEmpty ? "Post doesn't exist." : "Showing post.",
        data: isEmpty ? undefined : results[0].get()
      });
    }
    const onFailure = () => {
      response.json({
        success: false,
        message: "Post doesn't exist."
      });
    }
    Post.where("post_id", index, {onSuccess, onFailure});
  }


  /**
   * @description Creates a new post.
   * @param {Object} request
   * @param {Object} response
   */
  store(request, response) {
    const post = new Post();
    post.name = request.body.postName;
    post.body = request.body.postBody
    const onSuccess = () => {
      if(typeof request.headers.referer === "string") {
        response.redirect("/posts");
      } else {
        response.json({
          success: true,
          message: "post created."
        });
      }
    }
    const onFailure = ({error}) => {
      if(typeof request.headers.referer === "string") {
        response.redirect("/posts");
      } else {
        response.json({
          success: false,
          message: "Unable to add post."
        });
      }
    }
    post.save({onSuccess, onFailure});
  }


  /**
   * @description Updates all existing posts with a specific ID.
   * @param {Object} request
   * @param {Object} response
   */
  update(request, response) {
    const index = request.body.ID;
    const onSuccess = () => {
      response.json({
        success: true,
        message: "post updated."
      });
    }
    const onFailure = ({error}) => {
      response.json({
        success: false,
        message: "Unable to update post."
      });
    }
    new Post().where("post_id", parseInt(index)).fetch(({error, self}) => {
      if (error) {
        onFailure({error});
        return;
      }
      self.name = request.body.postName;
      self.body = request.body.postBody;
      self.updatedAt = new Date().valueOf();
      self.save({onSuccess, onFailure});
    });
  }


  /**
   * @description Deletes all posts with a specific ID.
   * @param {Object} request
   * @param {Object} response
   */
  destroy(request, response) {
    const index = request.body.ID;
    const onSuccess = () => {
      response.json({
        success: true,
        message: "Post deleted."
      });
    }
    const onFailure = ({error}) => {
      response.json({
        success: false,
        message: "Unable to delete post."
      });
    }
    new Post().where("post_id", parseInt(index)).fetch(({error, self}) => {
      if (error) {
        onFailure({error});
        return;
      }
      self.delete({onSuccess, onFailure});
    });
  }

}


module.exports = PostController;