// Imports
const { AVAController, AVAStorage, AVARecordZone } = require("avacore");


/**
 * This Controller was added as a part of 'example1' at initialisation of this Avalanche project.
 * @description Manages requests regarding Posts.
 */
class PostController extends AVAController {

  constructor() {
    super()
    const storage = new AVAStorage();
    if(!storage.recordZoneExists("Post")) {
      storage.addRecordZone(new AVARecordZone("Post", []))
    }
  }

  /**
   * @description Shows all posts.
   * @param {Object} request
   * @param {Object} response
   */
  index(request, response) {
    const storage = new AVAStorage();
    const zone = storage.getRecordZone("Post");
    response.json({
      success: true,
      message: "Showing all records.",
      data: zone.getRecords()
    });
  }

  /**
   * @description Shows a specific post.
   * @param {Object} request
   * @param {Object} response
   */
  show(request, response) {
    const index = request.query.ID;
    const storage = new AVAStorage();
    const zone = storage.getRecordZone("Post");
    if(typeof index === "undefined") {
      response.json({
        success: false,
        message: "Missing index."
      });
      return;
    }
    const record = zone.getRecordAtIndex(index);
    if(record === null) {
      response.json({
        success: false,
        message: "Record doesn't exist."
      });
      return;
    }
    response.json({
      success: true,
      message: "Showing record.",
      data: record
    });
  }

  /**
   * @description Creates a new post.
   * @param {Object} request
   * @param {Object} response
   */
  store(request, response) {
    const postName = request.body.postName;
    const postBody = request.body.postBody;
    const storage = new AVAStorage();
    const zone = storage.getRecordZone("Post");
    const data = {
      post_name: postName,
      post_body: postBody
    };
    zone.addRecord(data);
    storage.save(zone);
    response.json({
      success: true,
      message: "Record added."
    });
  }

  /**
   * @description Updates an existing post.
   * @param {Object} request
   * @param {Object} response
   */
  update(request, response) {
    const postName = request.body.postName;
    const postBody = request.body.postBody;
    const index = request.body.ID;
    const storage = new AVAStorage();
    const zone = storage.getRecordZone("Post");
    if(typeof index === "undefined") {
      response.json({
        success: false,
        message: "Missing index."
      });
      return;
    }
    const data = {
      post_name: postName,
      post_body: postBody
    };
    const updated = zone.setRecordAtIndex(data, index);
    storage.save(zone);
    response.json({
      success: updated,
      message: updated ? "Record updated." : "Record doesn't exist."
    });
  }

  /**
   * @description Deletes a specific post.
   * @param {Object} request
   * @param {Object} response
   */
  destroy(request, response) {
    const index = request.body.ID;
    const storage = new AVAStorage();
    const zone = storage.getRecordZone("Post");
    if(typeof index === "undefined") {
      response.json({
        success: false,
        message: "Missing index."
      });
      return;
    }
    const deleted = zone.deleteRecordAtIndex(index);
    storage.save(zone);
    response.json({
      success: deleted,
      message: deleted ? "Record deleted." : "Record doesn't exist."
    });
  }

}



module.exports = PostController;
